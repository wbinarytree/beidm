-- @path simplepdl=/BE/SimplePDL.ecore
-- @path petrinet=/BE/PetriNet.ecore

module SimplePDL2PetriNet;
create OUT : petrinet from IN : simplepdl;

-- Obtenir le processus qui contient ce process element.
-- Remarque: Ce helper ne serait pas utile si une r�f�rence opposite
-- avait �t� plac�e entre Process et ProcessElement
helper context simplepdl!ProcessElement
def: getProcess(): simplepdl!Process =
	simplepdl!Process.allInstances()
		->select(p | p.processElements->includes(self))
		->asSequence()->first();

-- Traduire un Process en un PetriNet de m�me nom
rule Process2PetriNet {
	from p: simplepdl!Process
	to pn: petrinet!PetriNet (name <- p.name),
	
		-- Places du Process : ready, started, finished, terminated
		p_ready: petrinet!Place(
			name <- p.name + '_ready',
			marking <- 1,
			net <- pn),
		p_started: petrinet!Place(
			name <- p.name + '_started',
			marking <- 0,
			net <- pn),
		p_finished: petrinet!Place(
			name <- p.name + '_finished',
			marking <- 0,
			net <- pn),
		p_terminated: petrinet!Place(
			name <- p.name + '_terminated',
			marking <- 0,
			net <- pn),
			
		-- Transitions du Process : start, terminate
		t_start: petrinet!Transition(
				name <- p.name + '_start',
				incomings <- a_r2s,
				outgoings <- p.processElements->select(wd | wd.oclIsTypeOf(simplepdl!WorkDefinition))
									->collect(wd | thisModule.resolveTemp(wd, 'a_sp'))->append(a_s2s),
				min_time <- 0,
				max_time <- -1,
				net <- pn),
		t_terminate: petrinet!Transition(
				name <- p.name + '_terminate',
				incomings <- a_f2t,
				outgoings <- a_t2t,
				min_time <- 0,
				max_time <- 0,
				net <- pn),
				
		-- Arcs du Process : ready2start, finish2terminate, terminate2terminated, start2started, started2terminate
		a_r2s: petrinet!Arc(
				source <- p_ready,
				target <- t_start,
				kind <- #normal,
				weight <- 1,
				net <- pn),
		a_f2t: petrinet!Arc(
				source <- p_finished,
				target <- t_terminate,
				kind <- #normal,
				weight <- 4,
				net <- pn),
		a_t2t: petrinet!Arc(
				source <- t_terminate,
				target <- p_terminated,
				kind <- #normal,
				weight <- 1,
				net <- pn),
		a_s2s: petrinet!Arc(
				source <- t_start,
				target <- p_started,
				kind <- #normal,
				weight <- 1,
				net <- pn),
		a_s2t: petrinet!Arc(
				source <- p_started,
				target <- t_terminate,
				kind <- #normal,
				weight <- 1,
				net <- pn),
		
		-- Places de l'observateur du Process : ready, early, not_early, late, ontime
		p_obs_started: petrinet!Place(
						name <- p.name + '_obs_ready',
						marking <- 0,
						net <- pn),
		p_obs_early: petrinet!Place(
						name <- p.name + '_obs_early',
						marking <- 0,
						net <- pn),
		p_obs_not_early: petrinet!Place(
						name <- p.name + '_obs_not_early',
						marking <- 0,
						net <- pn),
		p_obs_late: petrinet!Place(
						name <- p.name + '_obs_late',
						marking <- 0,
						net <- pn),
		p_obs_ontime: petrinet!Place(
						name <- p.name + '_obs_ontime',
						marking <- 0,
						net <- pn),
						
		-- Transitions de l'observateur du Process :
		t_obs_early: petrinet!Transition(
				name <- p.name + '_obs_tearly',
				incomings <- a_os2oe,
				outgoings <- a_oe2oe,
				min_time <- 0,
				max_time <- 0,
				net <- pn),
		t_obs_not_early: petrinet!Transition(
				name <- p.name + '_obs_not_tearly',
				incomings <- a_os2one,
				outgoings <- a_one2one,
				min_time <- p.min_time,
				max_time <- p.min_time,
				net <- pn),
		t_obs_late: petrinet!Transition(
				name <- p.name + '_obs_tlate',
				incomings <- a_one2ol,
				outgoings <- a_ol2ol,
				min_time <- p.max_time - p.min_time,
				max_time <- p.max_time - p.min_time,
				net <- pn),
		t_obs_ontime: petrinet!Transition(
				name <- p.name + '_obs_tontime',
				incomings <- a_one2ot,
				outgoings <- a_ot2ot,
				min_time <- 0,
				max_time <- 0,
				net <- pn),
				
		-- Arcs de l'observateur du Process
		a_s2os: petrinet!Arc(
				source <- t_start,
				target <- p_obs_started,
				weight <- 1,
				kind <- #normal,
				net <- pn),
		a_os2oe: petrinet!Arc(
				source <- p_obs_started,
				target <- t_obs_early,
				weight <- 1,
				kind <- #normal,
				net <- pn),
		a_oe2oe: petrinet!Arc(
				source <- t_obs_early,
				target <- p_obs_early,
				weight <- 1,
				kind <- #normal,
				net <- pn),
		a_os2one: petrinet!Arc(
				source <- p_obs_started,
				target <- t_obs_not_early,
				weight <- 1,
				kind <- #normal,
				net <- pn),
		a_one2one: petrinet!Arc(
				source <- t_obs_not_early,
				target <- p_obs_not_early,
				weight <- 1,
				kind <- #normal,
				net <- pn),
		a_one2ol: petrinet!Arc(
				source <- p_obs_not_early,
				target <- t_obs_late,
				weight <- 1,
				kind <- #normal,
				net <- pn),
		a_ol2ol: petrinet!Arc(
				source <- t_obs_late,
				target <- p_obs_late,
				weight <- 1,
				kind <- #normal,
				net <- pn),
		a_one2ot: petrinet!Arc(
				source <- p_obs_not_early,
				target <- t_obs_ontime,
				weight <- 1,
				kind <- #normal,
				net <- pn),
		a_ot2ot: petrinet!Arc(
				source <- t_obs_ontime,
				target <- p_obs_ontime,
				weight <- 1,
				kind <- #normal,
				net <- pn),
		a_s2one: petrinet!Arc(
				source <- p_started,
				target <- t_obs_not_early,
				weight <- 1,
				kind <- #read_arc,
				net <- pn),
		a_t2oe: petrinet!Arc(
				source <- p_terminated,
				target <- t_obs_early,
				weight <- 1,
				kind <- #read_arc,
				net <- pn),
		a_s2ol: petrinet!Arc(
				source <- p_started,
				target <- t_obs_late,
				weight <- 1,
				kind <- #read_arc,
				net <- pn),
		a_t2ot: petrinet!Arc(
				source <- p_terminated,
				target <- t_obs_ontime,
				weight <- 1,
				kind <- #read_arc,
				net <- pn)
}

-- Traduire une WorkDefinition en un motif sur le r�seau de Petri
rule WorkDefinition2PetriNet {
	from wd: simplepdl!WorkDefinition
	to
		-- Places de la WorkDefinition : ready, started, finished, hasStarted
		p_ready: petrinet!Place(
						name <- wd.name + '_ready',
						marking <- 0,
						net <- wd.getProcess()),
		p_started: petrinet!Place(
						name <- wd.name + '_started',
						marking <- 0,
						net <- wd.getProcess()),
		p_finished: petrinet!Place(
						name <- wd.name + '_finished',
						marking <- 0,
						net <- wd.getProcess()),
		p_hasStarted: petrinet!Place(
						name <- wd.name + '_hasStarted',
						marking <- 0,
						net <- wd.getProcess()),
		
		-- Transition de la WorkDefinition : start, finish
		t_start: petrinet!Transition(
				name <- wd.name + '_start',
				incomings <- a_r2s,
				outgoings <- a_s2s,
				min_time <- 0,
				max_time <- -1,
				net <- wd.getProcess()),
		t_finish: petrinet!Transition(
				name <- wd.name + '_finish',
				incomings <- a_s2f,
				outgoings <- a_f2f,
				min_time <- 0,
				max_time <- -1,
				net <- wd.getProcess()),
	
		-- Arcs de la WorkDefinitions : ready2start, start2started, started2finish, finish2finished, start2hasStarted
		a_r2s: petrinet!Arc(
				source <- p_ready,
				target <- t_start,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
		a_s2s: petrinet!Arc(
				source <- t_start,
				target <- p_started,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
		a_s2f: petrinet!Arc(
				source <- p_started,
				target <- t_finish,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
		a_f2f: petrinet!Arc(
				source <- t_finish,
				target <- p_finished,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
		a_s2h: petrinet!Arc(
				source <- t_start,
				target <- p_hasStarted,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
				
		-- Places de l'extension Gestion plus fine des ressources
		p_running: petrinet!Place(
						name <- wd.name + '_running',
						marking <- 0,
						net <- wd.getProcess()),
		p_interrupted: petrinet!Place(
						name <- wd.name + '_interrupted',
						marking <- 0,
						net <- wd.getProcess()),
		
		-- Transitions de l'extension Gestion plus fine des ressources
		t_interrupt: petrinet!Transition(
				name <- wd.name + '_interrupt',
				incomings <- a_r2i,
				outgoings <- a_i2i,
				min_time <- 0,
				max_time <- -1,
				net <- wd.getProcess()),
		t_resume: petrinet!Transition(
				name <- wd.name + '_resume',
				incomings <- a_i2r,
				outgoings <- a_r2r,
				min_time <- 0,
				max_time <- -1,
				net <- wd.getProcess()),
		
		-- Arcs de l'extension Gestion plus fine des ressources
		a_r2i: petrinet!Arc(
				source <- p_running,
				target <- t_interrupt,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
		a_i2i: petrinet!Arc(
				source <- t_interrupt,
				target <- p_interrupted,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
		a_i2r: petrinet!Arc(
				source <- p_interrupted,
				target <- t_resume,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
		a_r2r: petrinet!Arc(
				source <- t_resume,
				target <- p_running,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
		a_s2r: petrinet!Arc(
				source <- t_start,
				target <- p_running,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
		a_r2f: petrinet!Arc(
				source <- p_running,
				target <- t_finish,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
		
		-- Places de l'observateur de la WorkDefinition : ready, early, not_early, late, ontime
		p_obs_started: petrinet!Place(
						name <- wd.name + '_obs_ready',
						marking <- 0,
						net <- wd.getProcess()),
		p_obs_early: petrinet!Place(
						name <- wd.name + '_obs_early',
						marking <- 0,
						net <- wd.getProcess()),
		p_obs_not_early: petrinet!Place(
						name <- wd.name + '_obs_not_early',
						marking <- 0,
						net <- wd.getProcess()),
		p_obs_late: petrinet!Place(
						name <- wd.name + '_obs_late',
						marking <- 0,
						net <- wd.getProcess()),
		p_obs_ontime: petrinet!Place(
						name <- wd.name + '_obs_ontime',
						marking <- 0,
						net <- wd.getProcess()),
						
		-- Transitions de l'observateur de la WorkDefinition
		t_obs_early: petrinet!Transition(
				name <- wd.name + '_obs_tearly',
				incomings <- a_os2oe,
				outgoings <- a_oe2oe,
				min_time <- 0,
				max_time <- 0,
				net <- wd.getProcess()),
		t_obs_not_early: petrinet!Transition(
				name <- wd.name + '_obs_not_tearly',
				incomings <- a_os2one,
				outgoings <- a_one2one,
				min_time <- wd.min_time,
				max_time <- wd.min_time,
				net <- wd.getProcess()),
		t_obs_late: petrinet!Transition(
				name <- wd.name + '_obs_tlate',
				incomings <- a_one2ol,
				outgoings <- a_ol2ol,
				min_time <- wd.max_time - wd.min_time,
				max_time <- wd.max_time - wd.min_time,
				net <- wd.getProcess()),
		t_obs_ontime: petrinet!Transition(
				name <- wd.name + '_obs_tontime',
				incomings <- a_one2ot,
				outgoings <- a_ot2ot,
				min_time <- 0,
				max_time <- 0,
				net <- wd.getProcess()),
				
		-- Arcs de l'observateur de la WorkDefinition
		a_s2os: petrinet!Arc(
				source <- t_start,
				target <- p_obs_started,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
		a_os2oe: petrinet!Arc(
				source <- p_obs_started,
				target <- t_obs_early,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
		a_oe2oe: petrinet!Arc(
				source <- t_obs_early,
				target <- p_obs_early,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
		a_os2one: petrinet!Arc(
				source <- p_obs_started,
				target <- t_obs_not_early,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
		a_one2one: petrinet!Arc(
				source <- t_obs_not_early,
				target <- p_obs_not_early,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
		a_one2ol: petrinet!Arc(
				source <- p_obs_not_early,
				target <- t_obs_late,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
		a_ol2ol: petrinet!Arc(
				source <- t_obs_late,
				target <- p_obs_late,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
		a_one2ot: petrinet!Arc(
				source <- p_obs_not_early,
				target <- t_obs_ontime,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
		a_ot2ot: petrinet!Arc(
				source <- t_obs_ontime,
				target <- p_obs_ontime,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
		a_s2one: petrinet!Arc(
				source <- p_started,
				target <- t_obs_not_early,
				weight <- 1,
				kind <- #read_arc,
				net <- wd.getProcess()),
		a_f2oe: petrinet!Arc(
				source <- p_finished,
				target <- t_obs_early,
				weight <- 1,
				kind <- #read_arc,
				net <- wd.getProcess()),
		a_s2ol: petrinet!Arc(
				source <- p_started,
				target <- t_obs_late,
				weight <- 1,
				kind <- #read_arc,
				net <- wd.getProcess()),
		a_f2ot: petrinet!Arc(
				source <- p_finished,
				target <- t_obs_ontime,
				weight <- 1,
				kind <- #read_arc,
				net <- wd.getProcess()),
				
		-- Arcs du Process de la WorkDefinition
		a_sp:	petrinet!Arc(
					source <- thisModule.resolveTemp(wd.getProcess(), 't_start'),
					target <- p_ready,
					kind <- #normal,
					weight <- 1,
					net <- wd.getProcess()),
		a_fp:	petrinet!Arc(
					source <- t_finish,
					target <- thisModule.resolveTemp(wd.getProcess(), 'p_finished'),
					kind <- #normal,
					weight <- 1,
					net <- wd.getProcess())
}

-- Traduire une WorkSequence en un motif sur le r�seau de Petri
rule WorkSequence2PetriNet {
	from ws: simplepdl!WorkSequence
	to
		-- Arcs de la WorkSequence : hasStarted / finished ---> start / finish 
		a_ws: petrinet!Arc(
				source <- 
					if ws.linkType = #startToStart or ws.linkType = #startToFinish then
						thisModule.resolveTemp(ws.predecessor, 'p_hasStarted')
					else
						thisModule.resolveTemp(ws.predecessor, 'p_finished')
					endif
					,
				target <- 
					if ws.linkType = #startToStart or ws.linkType = #finishToStart then
						thisModule.resolveTemp(ws.successor, 't_start')
					else
						thisModule.resolveTemp(ws.successor, 't_finish')
					endif
					,
				weight <- 1,
				kind <- #read_arc,
				net <- ws.getProcess())
}

rule RessourceDefinition2PetriNet {
	from rd: simplepdl!RessourceDefinition
	to
		-- Places d'une RessourceDefinition
		p_ressource: petrinet!Place(
						name <- rd.name,
						marking <- rd.number,
						net <- rd.getProcess())
}

rule RessourceInstance2PetriNet {
	from ri: simplepdl!RessourceInstance
	to
		-- Arcs d'une RessourceInstance
		a_r2s: petrinet!Arc(
						source <- thisModule.resolveTemp(ri.type, 'p_ressource'),
						target <- thisModule.resolveTemp(ri.activity, 't_start'),
						weight <- ri.instances,
						kind <- #normal,
						net <- ri.getProcess()),
		a_f2r: petrinet!Arc(
						source <- thisModule.resolveTemp(ri.activity, 't_finish'),
						target <- thisModule.resolveTemp(ri.type, 'p_ressource'),
						weight <- ri.instances,
						kind <- #normal,
						net <- ri.getProcess()),
		
		-- Arcs de l'extension Gestion plus fine des ressources
		a_i2r: petrinet!Arc(
				source <- thisModule.resolveTemp(ri.activity, 't_interrupt'),
				target <- thisModule.resolveTemp(ri.type, 'p_ressource'),
				weight <- ri.instances,
				kind <- #normal,
				net <- ri.getProcess()),
		a_r2r: petrinet!Arc(
				source <- thisModule.resolveTemp(ri.type, 'p_ressource'),
				target <- thisModule.resolveTemp(ri.activity, 't_resume'),
				weight <- ri.instances,
				kind <- #normal,
				net <- ri.getProcess())
}
