/*
* generated by Xtext
*/

package fr.enseeiht.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class PDL2GrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Process");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProcessElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProcessElementsProcessElementParserRuleCall_3_0 = (RuleCall)cProcessElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Process:
		//	"process" name=ID "{" processElements+=ProcessElement* "}";
		public ParserRule getRule() { return rule; }

		//"process" name=ID "{" processElements+=ProcessElement* "}"
		public Group getGroup() { return cGroup; }

		//"process"
		public Keyword getProcessKeyword_0() { return cProcessKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//processElements+=ProcessElement*
		public Assignment getProcessElementsAssignment_3() { return cProcessElementsAssignment_3; }

		//ProcessElement
		public RuleCall getProcessElementsProcessElementParserRuleCall_3_0() { return cProcessElementsProcessElementParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ProcessElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWorkDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGuidanceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ProcessElement:
		//	WorkDefinition | Guidance;
		public ParserRule getRule() { return rule; }

		//WorkDefinition | Guidance
		public Alternatives getAlternatives() { return cAlternatives; }

		//WorkDefinition
		public RuleCall getWorkDefinitionParserRuleCall_0() { return cWorkDefinitionParserRuleCall_0; }

		//Guidance
		public RuleCall getGuidanceParserRuleCall_1() { return cGuidanceParserRuleCall_1; }
	}

	public class WorkDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WorkDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWdKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cStartKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cIfKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cLinksToPredecessorsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cLinksToPredecessorsDependanceStartParserRuleCall_3_2_0 = (RuleCall)cLinksToPredecessorsAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFinishKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cIfKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cLinksToSuccessorsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cLinksToSuccessorsDependanceFinishParserRuleCall_4_2_0 = (RuleCall)cLinksToSuccessorsAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//WorkDefinition:
		//	"wd" name=ID "{" ("start" "if" linksToPredecessors+=DependanceStart+)? ("finish" "if"
		//	linksToSuccessors+=DependanceFinish+)? "}";
		public ParserRule getRule() { return rule; }

		//"wd" name=ID "{" ("start" "if" linksToPredecessors+=DependanceStart+)? ("finish" "if"
		//linksToSuccessors+=DependanceFinish+)? "}"
		public Group getGroup() { return cGroup; }

		//"wd"
		public Keyword getWdKeyword_0() { return cWdKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("start" "if" linksToPredecessors+=DependanceStart+)?
		public Group getGroup_3() { return cGroup_3; }

		//"start"
		public Keyword getStartKeyword_3_0() { return cStartKeyword_3_0; }

		//"if"
		public Keyword getIfKeyword_3_1() { return cIfKeyword_3_1; }

		//linksToPredecessors+=DependanceStart+
		public Assignment getLinksToPredecessorsAssignment_3_2() { return cLinksToPredecessorsAssignment_3_2; }

		//DependanceStart
		public RuleCall getLinksToPredecessorsDependanceStartParserRuleCall_3_2_0() { return cLinksToPredecessorsDependanceStartParserRuleCall_3_2_0; }

		//("finish" "if" linksToSuccessors+=DependanceFinish+)?
		public Group getGroup_4() { return cGroup_4; }

		//"finish"
		public Keyword getFinishKeyword_4_0() { return cFinishKeyword_4_0; }

		//"if"
		public Keyword getIfKeyword_4_1() { return cIfKeyword_4_1; }

		//linksToSuccessors+=DependanceFinish+
		public Assignment getLinksToSuccessorsAssignment_4_2() { return cLinksToSuccessorsAssignment_4_2; }

		//DependanceFinish
		public RuleCall getLinksToSuccessorsDependanceFinishParserRuleCall_4_2_0() { return cLinksToSuccessorsDependanceFinishParserRuleCall_4_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class DependanceStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DependanceStart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPredecessorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPredecessorWorkDefinitionCrossReference_0_0 = (CrossReference)cPredecessorAssignment_0.eContents().get(0);
		private final RuleCall cPredecessorWorkDefinitionIDTerminalRuleCall_0_0_1 = (RuleCall)cPredecessorWorkDefinitionCrossReference_0_0.eContents().get(1);
		private final Assignment cLinkAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLinkWorkSequenceKindStartParserRuleCall_1_0 = (RuleCall)cLinkAssignment_1.eContents().get(0);
		
		//DependanceStart:
		//	predecessor=[WorkDefinition] link=WorkSequenceKindStart;
		public ParserRule getRule() { return rule; }

		//predecessor=[WorkDefinition] link=WorkSequenceKindStart
		public Group getGroup() { return cGroup; }

		//predecessor=[WorkDefinition]
		public Assignment getPredecessorAssignment_0() { return cPredecessorAssignment_0; }

		//[WorkDefinition]
		public CrossReference getPredecessorWorkDefinitionCrossReference_0_0() { return cPredecessorWorkDefinitionCrossReference_0_0; }

		//ID
		public RuleCall getPredecessorWorkDefinitionIDTerminalRuleCall_0_0_1() { return cPredecessorWorkDefinitionIDTerminalRuleCall_0_0_1; }

		//link=WorkSequenceKindStart
		public Assignment getLinkAssignment_1() { return cLinkAssignment_1; }

		//WorkSequenceKindStart
		public RuleCall getLinkWorkSequenceKindStartParserRuleCall_1_0() { return cLinkWorkSequenceKindStartParserRuleCall_1_0; }
	}

	public class WorkSequenceKindStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WorkSequenceKindStart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStarted2StartAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cStarted2StartStartedKeyword_0_0 = (Keyword)cStarted2StartAssignment_0.eContents().get(0);
		private final Assignment cStarted2FinishAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cStarted2FinishFinishedKeyword_1_0 = (Keyword)cStarted2FinishAssignment_1.eContents().get(0);
		
		//WorkSequenceKindStart:
		//	Started2Start="started" | Started2Finish="finished";
		public ParserRule getRule() { return rule; }

		//Started2Start="started" | Started2Finish="finished"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Started2Start="started"
		public Assignment getStarted2StartAssignment_0() { return cStarted2StartAssignment_0; }

		//"started"
		public Keyword getStarted2StartStartedKeyword_0_0() { return cStarted2StartStartedKeyword_0_0; }

		//Started2Finish="finished"
		public Assignment getStarted2FinishAssignment_1() { return cStarted2FinishAssignment_1; }

		//"finished"
		public Keyword getStarted2FinishFinishedKeyword_1_0() { return cStarted2FinishFinishedKeyword_1_0; }
	}

	public class DependanceFinishElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DependanceFinish");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPredecessorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPredecessorWorkDefinitionCrossReference_0_0 = (CrossReference)cPredecessorAssignment_0.eContents().get(0);
		private final RuleCall cPredecessorWorkDefinitionIDTerminalRuleCall_0_0_1 = (RuleCall)cPredecessorWorkDefinitionCrossReference_0_0.eContents().get(1);
		private final Assignment cLinkAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLinkWorkSequenceKindFinishParserRuleCall_1_0 = (RuleCall)cLinkAssignment_1.eContents().get(0);
		
		//DependanceFinish:
		//	predecessor=[WorkDefinition] link=WorkSequenceKindFinish;
		public ParserRule getRule() { return rule; }

		//predecessor=[WorkDefinition] link=WorkSequenceKindFinish
		public Group getGroup() { return cGroup; }

		//predecessor=[WorkDefinition]
		public Assignment getPredecessorAssignment_0() { return cPredecessorAssignment_0; }

		//[WorkDefinition]
		public CrossReference getPredecessorWorkDefinitionCrossReference_0_0() { return cPredecessorWorkDefinitionCrossReference_0_0; }

		//ID
		public RuleCall getPredecessorWorkDefinitionIDTerminalRuleCall_0_0_1() { return cPredecessorWorkDefinitionIDTerminalRuleCall_0_0_1; }

		//link=WorkSequenceKindFinish
		public Assignment getLinkAssignment_1() { return cLinkAssignment_1; }

		//WorkSequenceKindFinish
		public RuleCall getLinkWorkSequenceKindFinishParserRuleCall_1_0() { return cLinkWorkSequenceKindFinishParserRuleCall_1_0; }
	}

	public class WorkSequenceKindFinishElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WorkSequenceKindFinish");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFinished2StartAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cFinished2StartStartedKeyword_0_0 = (Keyword)cFinished2StartAssignment_0.eContents().get(0);
		private final Assignment cFinished2FinishAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cFinished2FinishFinishedKeyword_1_0 = (Keyword)cFinished2FinishAssignment_1.eContents().get(0);
		
		//WorkSequenceKindFinish:
		//	Finished2Start="started" | Finished2Finish="finished";
		public ParserRule getRule() { return rule; }

		//Finished2Start="started" | Finished2Finish="finished"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Finished2Start="started"
		public Assignment getFinished2StartAssignment_0() { return cFinished2StartAssignment_0; }

		//"started"
		public Keyword getFinished2StartStartedKeyword_0_0() { return cFinished2StartStartedKeyword_0_0; }

		//Finished2Finish="finished"
		public Assignment getFinished2FinishAssignment_1() { return cFinished2FinishAssignment_1; }

		//"finished"
		public Keyword getFinished2FinishFinishedKeyword_1_0() { return cFinished2FinishFinishedKeyword_1_0; }
	}

	public class GuidanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Guidance");
		private final Assignment cTextAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_0 = (RuleCall)cTextAssignment.eContents().get(0);
		
		//Guidance:
		//	text=STRING;
		public ParserRule getRule() { return rule; }

		//text=STRING
		public Assignment getTextAssignment() { return cTextAssignment; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_0() { return cTextSTRINGTerminalRuleCall_0; }
	}
	
	
	private ProcessElements pProcess;
	private ProcessElementElements pProcessElement;
	private WorkDefinitionElements pWorkDefinition;
	private DependanceStartElements pDependanceStart;
	private WorkSequenceKindStartElements pWorkSequenceKindStart;
	private DependanceFinishElements pDependanceFinish;
	private WorkSequenceKindFinishElements pWorkSequenceKindFinish;
	private GuidanceElements pGuidance;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public PDL2GrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.enseeiht.PDL2".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Process:
	//	"process" name=ID "{" processElements+=ProcessElement* "}";
	public ProcessElements getProcessAccess() {
		return (pProcess != null) ? pProcess : (pProcess = new ProcessElements());
	}
	
	public ParserRule getProcessRule() {
		return getProcessAccess().getRule();
	}

	//ProcessElement:
	//	WorkDefinition | Guidance;
	public ProcessElementElements getProcessElementAccess() {
		return (pProcessElement != null) ? pProcessElement : (pProcessElement = new ProcessElementElements());
	}
	
	public ParserRule getProcessElementRule() {
		return getProcessElementAccess().getRule();
	}

	//WorkDefinition:
	//	"wd" name=ID "{" ("start" "if" linksToPredecessors+=DependanceStart+)? ("finish" "if"
	//	linksToSuccessors+=DependanceFinish+)? "}";
	public WorkDefinitionElements getWorkDefinitionAccess() {
		return (pWorkDefinition != null) ? pWorkDefinition : (pWorkDefinition = new WorkDefinitionElements());
	}
	
	public ParserRule getWorkDefinitionRule() {
		return getWorkDefinitionAccess().getRule();
	}

	//DependanceStart:
	//	predecessor=[WorkDefinition] link=WorkSequenceKindStart;
	public DependanceStartElements getDependanceStartAccess() {
		return (pDependanceStart != null) ? pDependanceStart : (pDependanceStart = new DependanceStartElements());
	}
	
	public ParserRule getDependanceStartRule() {
		return getDependanceStartAccess().getRule();
	}

	//WorkSequenceKindStart:
	//	Started2Start="started" | Started2Finish="finished";
	public WorkSequenceKindStartElements getWorkSequenceKindStartAccess() {
		return (pWorkSequenceKindStart != null) ? pWorkSequenceKindStart : (pWorkSequenceKindStart = new WorkSequenceKindStartElements());
	}
	
	public ParserRule getWorkSequenceKindStartRule() {
		return getWorkSequenceKindStartAccess().getRule();
	}

	//DependanceFinish:
	//	predecessor=[WorkDefinition] link=WorkSequenceKindFinish;
	public DependanceFinishElements getDependanceFinishAccess() {
		return (pDependanceFinish != null) ? pDependanceFinish : (pDependanceFinish = new DependanceFinishElements());
	}
	
	public ParserRule getDependanceFinishRule() {
		return getDependanceFinishAccess().getRule();
	}

	//WorkSequenceKindFinish:
	//	Finished2Start="started" | Finished2Finish="finished";
	public WorkSequenceKindFinishElements getWorkSequenceKindFinishAccess() {
		return (pWorkSequenceKindFinish != null) ? pWorkSequenceKindFinish : (pWorkSequenceKindFinish = new WorkSequenceKindFinishElements());
	}
	
	public ParserRule getWorkSequenceKindFinishRule() {
		return getWorkSequenceKindFinishAccess().getRule();
	}

	//Guidance:
	//	text=STRING;
	public GuidanceElements getGuidanceAccess() {
		return (pGuidance != null) ? pGuidance : (pGuidance = new GuidanceElements());
	}
	
	public ParserRule getGuidanceRule() {
		return getGuidanceAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
