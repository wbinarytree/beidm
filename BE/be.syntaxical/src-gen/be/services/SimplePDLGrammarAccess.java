/*
* generated by Xtext
*/

package be.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SimplePDLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Process");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProcessAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cProcessKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cMin_timeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMin_timeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMin_timeEIntParserRuleCall_5_0 = (RuleCall)cMin_timeAssignment_5.eContents().get(0);
		private final Keyword cMax_timeKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cMax_timeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMax_timeEIntParserRuleCall_7_0 = (RuleCall)cMax_timeAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cProcessElementsAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cProcessElementsProcessElementParserRuleCall_8_0_0 = (RuleCall)cProcessElementsAssignment_8_0.eContents().get(0);
		private final Assignment cProcessElementsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cProcessElementsProcessElementParserRuleCall_8_1_0 = (RuleCall)cProcessElementsAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Process:
		//	{Process} "process" name=EString "{" "min_time" min_time=EInt "max_time" max_time=EInt
		//	(processElements+=ProcessElement processElements+=ProcessElement*)? "}";
		public ParserRule getRule() { return rule; }

		//{Process} "process" name=EString "{" "min_time" min_time=EInt "max_time" max_time=EInt (processElements+=ProcessElement
		//processElements+=ProcessElement*)? "}"
		public Group getGroup() { return cGroup; }

		//{Process}
		public Action getProcessAction_0() { return cProcessAction_0; }

		//"process"
		public Keyword getProcessKeyword_1() { return cProcessKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//"min_time"
		public Keyword getMin_timeKeyword_4() { return cMin_timeKeyword_4; }

		//min_time=EInt
		public Assignment getMin_timeAssignment_5() { return cMin_timeAssignment_5; }

		//EInt
		public RuleCall getMin_timeEIntParserRuleCall_5_0() { return cMin_timeEIntParserRuleCall_5_0; }

		//"max_time"
		public Keyword getMax_timeKeyword_6() { return cMax_timeKeyword_6; }

		//max_time=EInt
		public Assignment getMax_timeAssignment_7() { return cMax_timeAssignment_7; }

		//EInt
		public RuleCall getMax_timeEIntParserRuleCall_7_0() { return cMax_timeEIntParserRuleCall_7_0; }

		//(processElements+=ProcessElement processElements+=ProcessElement*)?
		public Group getGroup_8() { return cGroup_8; }

		//processElements+=ProcessElement
		public Assignment getProcessElementsAssignment_8_0() { return cProcessElementsAssignment_8_0; }

		//ProcessElement
		public RuleCall getProcessElementsProcessElementParserRuleCall_8_0_0() { return cProcessElementsProcessElementParserRuleCall_8_0_0; }

		//processElements+=ProcessElement*
		public Assignment getProcessElementsAssignment_8_1() { return cProcessElementsAssignment_8_1; }

		//ProcessElement
		public RuleCall getProcessElementsProcessElementParserRuleCall_8_1_0() { return cProcessElementsProcessElementParserRuleCall_8_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class ProcessElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWorkDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWorkSequenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGuidanceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRessourceDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRessourceInstanceParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//ProcessElement:
		//	WorkDefinition | WorkSequence | Guidance | RessourceDefinition | RessourceInstance;
		public ParserRule getRule() { return rule; }

		//WorkDefinition | WorkSequence | Guidance | RessourceDefinition | RessourceInstance
		public Alternatives getAlternatives() { return cAlternatives; }

		//WorkDefinition
		public RuleCall getWorkDefinitionParserRuleCall_0() { return cWorkDefinitionParserRuleCall_0; }

		//WorkSequence
		public RuleCall getWorkSequenceParserRuleCall_1() { return cWorkSequenceParserRuleCall_1; }

		//Guidance
		public RuleCall getGuidanceParserRuleCall_2() { return cGuidanceParserRuleCall_2; }

		//RessourceDefinition
		public RuleCall getRessourceDefinitionParserRuleCall_3() { return cRessourceDefinitionParserRuleCall_3; }

		//RessourceInstance
		public RuleCall getRessourceInstanceParserRuleCall_4() { return cRessourceInstanceParserRuleCall_4; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class WorkDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WorkDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWdKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cMinKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMin_timeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMin_timeEIntParserRuleCall_3_0 = (RuleCall)cMin_timeAssignment_3.eContents().get(0);
		private final Keyword cMaxKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMax_timeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMax_timeEIntParserRuleCall_5_0 = (RuleCall)cMax_timeAssignment_5.eContents().get(0);
		
		/// *('linksToPredecessors' '(' linksToPredecessors+=[WorkSequence|EString] ( "," linksToPredecessors+=[WorkSequence|EString])* ')' )?
		//		('linksToSuccessors' '(' linksToSuccessors+=[WorkSequence|EString] ( "," linksToSuccessors+=[WorkSequence|EString])* ')' )?
		//		('linksToRessources' '(' linksToRessources+=[RessourceInstance|EString] ( "," linksToRessources+=[RessourceInstance|EString])* ')' )?* / WorkDefinition:
		//	"wd" name=EString "min" min_time=EInt "max" max_time=EInt;
		public ParserRule getRule() { return rule; }

		//"wd" name=EString "min" min_time=EInt "max" max_time=EInt
		public Group getGroup() { return cGroup; }

		//"wd"
		public Keyword getWdKeyword_0() { return cWdKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"min"
		public Keyword getMinKeyword_2() { return cMinKeyword_2; }

		//min_time=EInt
		public Assignment getMin_timeAssignment_3() { return cMin_timeAssignment_3; }

		//EInt
		public RuleCall getMin_timeEIntParserRuleCall_3_0() { return cMin_timeEIntParserRuleCall_3_0; }

		//"max"
		public Keyword getMaxKeyword_4() { return cMaxKeyword_4; }

		//max_time=EInt
		public Assignment getMax_timeAssignment_5() { return cMax_timeAssignment_5; }

		//EInt
		public RuleCall getMax_timeEIntParserRuleCall_5_0() { return cMax_timeEIntParserRuleCall_5_0; }
	}

	public class WorkSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WorkSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLinkTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLinkTypeWorkSequenceTypeEnumRuleCall_1_0 = (RuleCall)cLinkTypeAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPredecessorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cPredecessorWorkDefinitionCrossReference_3_0 = (CrossReference)cPredecessorAssignment_3.eContents().get(0);
		private final RuleCall cPredecessorWorkDefinitionEStringParserRuleCall_3_0_1 = (RuleCall)cPredecessorWorkDefinitionCrossReference_3_0.eContents().get(1);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSuccessorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSuccessorWorkDefinitionCrossReference_5_0 = (CrossReference)cSuccessorAssignment_5.eContents().get(0);
		private final RuleCall cSuccessorWorkDefinitionEStringParserRuleCall_5_0_1 = (RuleCall)cSuccessorWorkDefinitionCrossReference_5_0.eContents().get(1);
		
		//WorkSequence:
		//	"ws" linkType=WorkSequenceType "from" predecessor=[WorkDefinition|EString] "to" successor=[WorkDefinition|EString];
		public ParserRule getRule() { return rule; }

		//"ws" linkType=WorkSequenceType "from" predecessor=[WorkDefinition|EString] "to" successor=[WorkDefinition|EString]
		public Group getGroup() { return cGroup; }

		//"ws"
		public Keyword getWsKeyword_0() { return cWsKeyword_0; }

		//linkType=WorkSequenceType
		public Assignment getLinkTypeAssignment_1() { return cLinkTypeAssignment_1; }

		//WorkSequenceType
		public RuleCall getLinkTypeWorkSequenceTypeEnumRuleCall_1_0() { return cLinkTypeWorkSequenceTypeEnumRuleCall_1_0; }

		//"from"
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }

		//predecessor=[WorkDefinition|EString]
		public Assignment getPredecessorAssignment_3() { return cPredecessorAssignment_3; }

		//[WorkDefinition|EString]
		public CrossReference getPredecessorWorkDefinitionCrossReference_3_0() { return cPredecessorWorkDefinitionCrossReference_3_0; }

		//EString
		public RuleCall getPredecessorWorkDefinitionEStringParserRuleCall_3_0_1() { return cPredecessorWorkDefinitionEStringParserRuleCall_3_0_1; }

		//"to"
		public Keyword getToKeyword_4() { return cToKeyword_4; }

		//successor=[WorkDefinition|EString]
		public Assignment getSuccessorAssignment_5() { return cSuccessorAssignment_5; }

		//[WorkDefinition|EString]
		public CrossReference getSuccessorWorkDefinitionCrossReference_5_0() { return cSuccessorWorkDefinitionCrossReference_5_0; }

		//EString
		public RuleCall getSuccessorWorkDefinitionEStringParserRuleCall_5_0_1() { return cSuccessorWorkDefinitionEStringParserRuleCall_5_0_1; }
	}

	public class GuidanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Guidance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGuidanceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//Guidance:
		//	{Guidance} / *'Guidance'
		//	'{'
		//		('text' text=EString)?
		//		('element' '(' element+=[ProcessElement|EString] ( "," element+=[ProcessElement|EString])* ')' )?
		//	'}'* / text=STRING;
		public ParserRule getRule() { return rule; }

		//{Guidance} / *'Guidance'
		//	'{'
		//		('text' text=EString)?
		//		('element' '(' element+=[ProcessElement|EString] ( "," element+=[ProcessElement|EString])* ')' )?
		//	'}'* / text=STRING
		public Group getGroup() { return cGroup; }

		//{Guidance}
		public Action getGuidanceAction_0() { return cGuidanceAction_0; }

		/// *'Guidance'
		//	'{'
		//		('text' text=EString)?
		//		('element' '(' element+=[ProcessElement|EString] ( "," element+=[ProcessElement|EString])* ')' )?
		//	'}'* / text=STRING
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_1_0() { return cTextSTRINGTerminalRuleCall_1_0; }
	}

	public class RessourceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RessourceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRdKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cNumberKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNumberAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNumberEIntParserRuleCall_3_0 = (RuleCall)cNumberAssignment_3.eContents().get(0);
		
		//RessourceDefinition:
		//	"rd" name=EString "number" number=EInt;
		public ParserRule getRule() { return rule; }

		//"rd" name=EString "number" number=EInt
		public Group getGroup() { return cGroup; }

		//"rd"
		public Keyword getRdKeyword_0() { return cRdKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"number"
		public Keyword getNumberKeyword_2() { return cNumberKeyword_2; }

		//number=EInt
		public Assignment getNumberAssignment_3() { return cNumberAssignment_3; }

		//EInt
		public RuleCall getNumberEIntParserRuleCall_3_0() { return cNumberEIntParserRuleCall_3_0; }
	}

	public class RessourceInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RessourceInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRiKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeRessourceDefinitionCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeRessourceDefinitionEStringParserRuleCall_2_0_1 = (RuleCall)cTypeRessourceDefinitionCrossReference_2_0.eContents().get(1);
		private final Keyword cActivityKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cActivityAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cActivityWorkDefinitionCrossReference_4_0 = (CrossReference)cActivityAssignment_4.eContents().get(0);
		private final RuleCall cActivityWorkDefinitionEStringParserRuleCall_4_0_1 = (RuleCall)cActivityWorkDefinitionCrossReference_4_0.eContents().get(1);
		private final Keyword cInstancesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cInstancesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInstancesEIntParserRuleCall_6_0 = (RuleCall)cInstancesAssignment_6.eContents().get(0);
		
		//RessourceInstance:
		//	"ri" "type" type=[RessourceDefinition|EString] "activity" activity=[WorkDefinition|EString] "instances"
		//	instances=EInt;
		public ParserRule getRule() { return rule; }

		//"ri" "type" type=[RessourceDefinition|EString] "activity" activity=[WorkDefinition|EString] "instances" instances=EInt
		public Group getGroup() { return cGroup; }

		//"ri"
		public Keyword getRiKeyword_0() { return cRiKeyword_0; }

		//"type"
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }

		//type=[RessourceDefinition|EString]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[RessourceDefinition|EString]
		public CrossReference getTypeRessourceDefinitionCrossReference_2_0() { return cTypeRessourceDefinitionCrossReference_2_0; }

		//EString
		public RuleCall getTypeRessourceDefinitionEStringParserRuleCall_2_0_1() { return cTypeRessourceDefinitionEStringParserRuleCall_2_0_1; }

		//"activity"
		public Keyword getActivityKeyword_3() { return cActivityKeyword_3; }

		//activity=[WorkDefinition|EString]
		public Assignment getActivityAssignment_4() { return cActivityAssignment_4; }

		//[WorkDefinition|EString]
		public CrossReference getActivityWorkDefinitionCrossReference_4_0() { return cActivityWorkDefinitionCrossReference_4_0; }

		//EString
		public RuleCall getActivityWorkDefinitionEStringParserRuleCall_4_0_1() { return cActivityWorkDefinitionEStringParserRuleCall_4_0_1; }

		//"instances"
		public Keyword getInstancesKeyword_5() { return cInstancesKeyword_5; }

		//instances=EInt
		public Assignment getInstancesAssignment_6() { return cInstancesAssignment_6; }

		//EInt
		public RuleCall getInstancesEIntParserRuleCall_6_0() { return cInstancesEIntParserRuleCall_6_0; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	public class WorkSequenceTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "WorkSequenceType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStartToStartEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStartToStartS2sKeyword_0_0 = (Keyword)cStartToStartEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cStartToFinishEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cStartToFinishS2fKeyword_1_0 = (Keyword)cStartToFinishEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFinishToStartEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFinishToStartF2sKeyword_2_0 = (Keyword)cFinishToStartEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFinishToFinishEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFinishToFinishF2fKeyword_3_0 = (Keyword)cFinishToFinishEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum WorkSequenceType:
		//	startToStart="s2s" | startToFinish="s2f" | finishToStart="f2s" | finishToFinish="f2f";
		public EnumRule getRule() { return rule; }

		//startToStart="s2s" | startToFinish="s2f" | finishToStart="f2s" | finishToFinish="f2f"
		public Alternatives getAlternatives() { return cAlternatives; }

		//startToStart="s2s"
		public EnumLiteralDeclaration getStartToStartEnumLiteralDeclaration_0() { return cStartToStartEnumLiteralDeclaration_0; }

		//"s2s"
		public Keyword getStartToStartS2sKeyword_0_0() { return cStartToStartS2sKeyword_0_0; }

		//startToFinish="s2f"
		public EnumLiteralDeclaration getStartToFinishEnumLiteralDeclaration_1() { return cStartToFinishEnumLiteralDeclaration_1; }

		//"s2f"
		public Keyword getStartToFinishS2fKeyword_1_0() { return cStartToFinishS2fKeyword_1_0; }

		//finishToStart="f2s"
		public EnumLiteralDeclaration getFinishToStartEnumLiteralDeclaration_2() { return cFinishToStartEnumLiteralDeclaration_2; }

		//"f2s"
		public Keyword getFinishToStartF2sKeyword_2_0() { return cFinishToStartF2sKeyword_2_0; }

		//finishToFinish="f2f"
		public EnumLiteralDeclaration getFinishToFinishEnumLiteralDeclaration_3() { return cFinishToFinishEnumLiteralDeclaration_3; }

		//"f2f"
		public Keyword getFinishToFinishF2fKeyword_3_0() { return cFinishToFinishF2fKeyword_3_0; }
	}
	
	private ProcessElements pProcess;
	private ProcessElementElements pProcessElement;
	private EStringElements pEString;
	private WorkDefinitionElements pWorkDefinition;
	private WorkSequenceElements pWorkSequence;
	private GuidanceElements pGuidance;
	private RessourceDefinitionElements pRessourceDefinition;
	private RessourceInstanceElements pRessourceInstance;
	private EIntElements pEInt;
	private WorkSequenceTypeElements unknownRuleWorkSequenceType;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SimplePDLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("be.SimplePDL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Process:
	//	{Process} "process" name=EString "{" "min_time" min_time=EInt "max_time" max_time=EInt
	//	(processElements+=ProcessElement processElements+=ProcessElement*)? "}";
	public ProcessElements getProcessAccess() {
		return (pProcess != null) ? pProcess : (pProcess = new ProcessElements());
	}
	
	public ParserRule getProcessRule() {
		return getProcessAccess().getRule();
	}

	//ProcessElement:
	//	WorkDefinition | WorkSequence | Guidance | RessourceDefinition | RessourceInstance;
	public ProcessElementElements getProcessElementAccess() {
		return (pProcessElement != null) ? pProcessElement : (pProcessElement = new ProcessElementElements());
	}
	
	public ParserRule getProcessElementRule() {
		return getProcessElementAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	/// *('linksToPredecessors' '(' linksToPredecessors+=[WorkSequence|EString] ( "," linksToPredecessors+=[WorkSequence|EString])* ')' )?
	//		('linksToSuccessors' '(' linksToSuccessors+=[WorkSequence|EString] ( "," linksToSuccessors+=[WorkSequence|EString])* ')' )?
	//		('linksToRessources' '(' linksToRessources+=[RessourceInstance|EString] ( "," linksToRessources+=[RessourceInstance|EString])* ')' )?* / WorkDefinition:
	//	"wd" name=EString "min" min_time=EInt "max" max_time=EInt;
	public WorkDefinitionElements getWorkDefinitionAccess() {
		return (pWorkDefinition != null) ? pWorkDefinition : (pWorkDefinition = new WorkDefinitionElements());
	}
	
	public ParserRule getWorkDefinitionRule() {
		return getWorkDefinitionAccess().getRule();
	}

	//WorkSequence:
	//	"ws" linkType=WorkSequenceType "from" predecessor=[WorkDefinition|EString] "to" successor=[WorkDefinition|EString];
	public WorkSequenceElements getWorkSequenceAccess() {
		return (pWorkSequence != null) ? pWorkSequence : (pWorkSequence = new WorkSequenceElements());
	}
	
	public ParserRule getWorkSequenceRule() {
		return getWorkSequenceAccess().getRule();
	}

	//Guidance:
	//	{Guidance} / *'Guidance'
	//	'{'
	//		('text' text=EString)?
	//		('element' '(' element+=[ProcessElement|EString] ( "," element+=[ProcessElement|EString])* ')' )?
	//	'}'* / text=STRING;
	public GuidanceElements getGuidanceAccess() {
		return (pGuidance != null) ? pGuidance : (pGuidance = new GuidanceElements());
	}
	
	public ParserRule getGuidanceRule() {
		return getGuidanceAccess().getRule();
	}

	//RessourceDefinition:
	//	"rd" name=EString "number" number=EInt;
	public RessourceDefinitionElements getRessourceDefinitionAccess() {
		return (pRessourceDefinition != null) ? pRessourceDefinition : (pRessourceDefinition = new RessourceDefinitionElements());
	}
	
	public ParserRule getRessourceDefinitionRule() {
		return getRessourceDefinitionAccess().getRule();
	}

	//RessourceInstance:
	//	"ri" "type" type=[RessourceDefinition|EString] "activity" activity=[WorkDefinition|EString] "instances"
	//	instances=EInt;
	public RessourceInstanceElements getRessourceInstanceAccess() {
		return (pRessourceInstance != null) ? pRessourceInstance : (pRessourceInstance = new RessourceInstanceElements());
	}
	
	public ParserRule getRessourceInstanceRule() {
		return getRessourceInstanceAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//enum WorkSequenceType:
	//	startToStart="s2s" | startToFinish="s2f" | finishToStart="f2s" | finishToFinish="f2f";
	public WorkSequenceTypeElements getWorkSequenceTypeAccess() {
		return (unknownRuleWorkSequenceType != null) ? unknownRuleWorkSequenceType : (unknownRuleWorkSequenceType = new WorkSequenceTypeElements());
	}
	
	public EnumRule getWorkSequenceTypeRule() {
		return getWorkSequenceTypeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
