/*
* generated by Xtext
*/
grammar InternalSimplePDL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package be.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package be.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import be.services.SimplePDLGrammarAccess;

}

@parser::members {

 	private SimplePDLGrammarAccess grammarAccess;
 	
    public InternalSimplePDLParser(TokenStream input, SimplePDLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Process";	
   	}
   	
   	@Override
   	protected SimplePDLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProcess
entryRuleProcess returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcessRule()); }
	 iv_ruleProcess=ruleProcess 
	 { $current=$iv_ruleProcess.current; } 
	 EOF 
;

// Rule Process
ruleProcess returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getProcessAccess().getProcessAction_0(),
            $current);
    }
)	otherlv_1='process' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getProcessAccess().getProcessKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcessAccess().getNameEStringParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcessRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getProcessAccess().getLeftCurlyBracketKeyword_3());
    }
	otherlv_4='min_time' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getProcessAccess().getMin_timeKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcessAccess().getMin_timeEIntParserRuleCall_5_0()); 
	    }
		lv_min_time_5_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcessRule());
	        }
       		set(
       			$current, 
       			"min_time",
        		lv_min_time_5_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='max_time' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getProcessAccess().getMax_timeKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcessAccess().getMax_timeEIntParserRuleCall_7_0()); 
	    }
		lv_max_time_7_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcessRule());
	        }
       		set(
       			$current, 
       			"max_time",
        		lv_max_time_7_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getProcessAccess().getProcessElementsProcessElementParserRuleCall_8_0_0()); 
	    }
		lv_processElements_8_0=ruleProcessElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcessRule());
	        }
       		add(
       			$current, 
       			"processElements",
        		lv_processElements_8_0, 
        		"ProcessElement");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getProcessAccess().getProcessElementsProcessElementParserRuleCall_8_1_0()); 
	    }
		lv_processElements_9_0=ruleProcessElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcessRule());
	        }
       		add(
       			$current, 
       			"processElements",
        		lv_processElements_9_0, 
        		"ProcessElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getProcessAccess().getRightCurlyBracketKeyword_9());
    }
)
;





// Entry rule entryRuleProcessElement
entryRuleProcessElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcessElementRule()); }
	 iv_ruleProcessElement=ruleProcessElement 
	 { $current=$iv_ruleProcessElement.current; } 
	 EOF 
;

// Rule ProcessElement
ruleProcessElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getProcessElementAccess().getWorkDefinitionParserRuleCall_0()); 
    }
    this_WorkDefinition_0=ruleWorkDefinition
    { 
        $current = $this_WorkDefinition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getProcessElementAccess().getWorkSequenceParserRuleCall_1()); 
    }
    this_WorkSequence_1=ruleWorkSequence
    { 
        $current = $this_WorkSequence_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getProcessElementAccess().getGuidanceParserRuleCall_2()); 
    }
    this_Guidance_2=ruleGuidance
    { 
        $current = $this_Guidance_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getProcessElementAccess().getRessourceDefinitionParserRuleCall_3()); 
    }
    this_RessourceDefinition_3=ruleRessourceDefinition
    { 
        $current = $this_RessourceDefinition_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getProcessElementAccess().getRessourceInstanceParserRuleCall_4()); 
    }
    this_RessourceInstance_4=ruleRessourceInstance
    { 
        $current = $this_RessourceInstance_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleWorkDefinition
entryRuleWorkDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWorkDefinitionRule()); }
	 iv_ruleWorkDefinition=ruleWorkDefinition 
	 { $current=$iv_ruleWorkDefinition.current; } 
	 EOF 
;

// Rule WorkDefinition
ruleWorkDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='wd' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWorkDefinitionAccess().getWdKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWorkDefinitionAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWorkDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='min' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getWorkDefinitionAccess().getMinKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWorkDefinitionAccess().getMin_timeEIntParserRuleCall_3_0()); 
	    }
		lv_min_time_3_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWorkDefinitionRule());
	        }
       		set(
       			$current, 
       			"min_time",
        		lv_min_time_3_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='max' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getWorkDefinitionAccess().getMaxKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWorkDefinitionAccess().getMax_timeEIntParserRuleCall_5_0()); 
	    }
		lv_max_time_5_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWorkDefinitionRule());
	        }
       		set(
       			$current, 
       			"max_time",
        		lv_max_time_5_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleWorkSequence
entryRuleWorkSequence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWorkSequenceRule()); }
	 iv_ruleWorkSequence=ruleWorkSequence 
	 { $current=$iv_ruleWorkSequence.current; } 
	 EOF 
;

// Rule WorkSequence
ruleWorkSequence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ws' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWorkSequenceAccess().getWsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWorkSequenceAccess().getLinkTypeWorkSequenceTypeEnumRuleCall_1_0()); 
	    }
		lv_linkType_1_0=ruleWorkSequenceType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWorkSequenceRule());
	        }
       		set(
       			$current, 
       			"linkType",
        		lv_linkType_1_0, 
        		"WorkSequenceType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='from' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getWorkSequenceAccess().getFromKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getWorkSequenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getWorkSequenceAccess().getPredecessorWorkDefinitionCrossReference_3_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='to' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getWorkSequenceAccess().getToKeyword_4());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getWorkSequenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getWorkSequenceAccess().getSuccessorWorkDefinitionCrossReference_5_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleGuidance
entryRuleGuidance returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGuidanceRule()); }
	 iv_ruleGuidance=ruleGuidance 
	 { $current=$iv_ruleGuidance.current; } 
	 EOF 
;

// Rule Guidance
ruleGuidance returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGuidanceAccess().getGuidanceAction_0(),
            $current);
    }
)(
(
		lv_text_1_0=RULE_STRING
		{
			newLeafNode(lv_text_1_0, grammarAccess.getGuidanceAccess().getTextSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGuidanceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleRessourceDefinition
entryRuleRessourceDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRessourceDefinitionRule()); }
	 iv_ruleRessourceDefinition=ruleRessourceDefinition 
	 { $current=$iv_ruleRessourceDefinition.current; } 
	 EOF 
;

// Rule RessourceDefinition
ruleRessourceDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='rd' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRessourceDefinitionAccess().getRdKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRessourceDefinitionAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRessourceDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='number' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRessourceDefinitionAccess().getNumberKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRessourceDefinitionAccess().getNumberEIntParserRuleCall_3_0()); 
	    }
		lv_number_3_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRessourceDefinitionRule());
	        }
       		set(
       			$current, 
       			"number",
        		lv_number_3_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRessourceInstance
entryRuleRessourceInstance returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRessourceInstanceRule()); }
	 iv_ruleRessourceInstance=ruleRessourceInstance 
	 { $current=$iv_ruleRessourceInstance.current; } 
	 EOF 
;

// Rule RessourceInstance
ruleRessourceInstance returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ri' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRessourceInstanceAccess().getRiKeyword_0());
    }
	otherlv_1='type' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRessourceInstanceAccess().getTypeKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRessourceInstanceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRessourceInstanceAccess().getTypeRessourceDefinitionCrossReference_2_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='activity' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRessourceInstanceAccess().getActivityKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRessourceInstanceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRessourceInstanceAccess().getActivityWorkDefinitionCrossReference_4_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='instances' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRessourceInstanceAccess().getInstancesKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRessourceInstanceAccess().getInstancesEIntParserRuleCall_6_0()); 
	    }
		lv_instances_6_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRessourceInstanceRule());
	        }
       		set(
       			$current, 
       			"instances",
        		lv_instances_6_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEIntRule()); } 
	 iv_ruleEInt=ruleEInt 
	 { $current=$iv_ruleEInt.current.getText(); }  
	 EOF 
;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Rule WorkSequenceType
ruleWorkSequenceType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='s2s' 
	{
        $current = grammarAccess.getWorkSequenceTypeAccess().getStartToStartEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getWorkSequenceTypeAccess().getStartToStartEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='s2f' 
	{
        $current = grammarAccess.getWorkSequenceTypeAccess().getStartToFinishEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getWorkSequenceTypeAccess().getStartToFinishEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='f2s' 
	{
        $current = grammarAccess.getWorkSequenceTypeAccess().getFinishToStartEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getWorkSequenceTypeAccess().getFinishToStartEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='f2f' 
	{
        $current = grammarAccess.getWorkSequenceTypeAccess().getFinishToFinishEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getWorkSequenceTypeAccess().getFinishToFinishEnumLiteralDeclaration_3()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


