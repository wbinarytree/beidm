/*
* generated by Xtext
*/
package be.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import be.services.SimplePDLGrammarAccess;

public class SimplePDLParser extends AbstractContentAssistParser {
	
	@Inject
	private SimplePDLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected be.ui.contentassist.antlr.internal.InternalSimplePDLParser createParser() {
		be.ui.contentassist.antlr.internal.InternalSimplePDLParser result = new be.ui.contentassist.antlr.internal.InternalSimplePDLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getProcessElementAccess().getAlternatives(), "rule__ProcessElement__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getWorkSequenceTypeAccess().getAlternatives(), "rule__WorkSequenceType__Alternatives");
					put(grammarAccess.getProcessAccess().getGroup(), "rule__Process__Group__0");
					put(grammarAccess.getProcessAccess().getGroup_4(), "rule__Process__Group_4__0");
					put(grammarAccess.getWorkDefinitionAccess().getGroup(), "rule__WorkDefinition__Group__0");
					put(grammarAccess.getWorkSequenceAccess().getGroup(), "rule__WorkSequence__Group__0");
					put(grammarAccess.getGuidanceAccess().getGroup(), "rule__Guidance__Group__0");
					put(grammarAccess.getRessourceDefinitionAccess().getGroup(), "rule__RessourceDefinition__Group__0");
					put(grammarAccess.getRessourceInstanceAccess().getGroup(), "rule__RessourceInstance__Group__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getProcessAccess().getNameAssignment_2(), "rule__Process__NameAssignment_2");
					put(grammarAccess.getProcessAccess().getProcessElementsAssignment_4_0(), "rule__Process__ProcessElementsAssignment_4_0");
					put(grammarAccess.getProcessAccess().getProcessElementsAssignment_4_1(), "rule__Process__ProcessElementsAssignment_4_1");
					put(grammarAccess.getWorkDefinitionAccess().getNameAssignment_1(), "rule__WorkDefinition__NameAssignment_1");
					put(grammarAccess.getWorkDefinitionAccess().getMin_timeAssignment_3(), "rule__WorkDefinition__Min_timeAssignment_3");
					put(grammarAccess.getWorkDefinitionAccess().getMax_timeAssignment_5(), "rule__WorkDefinition__Max_timeAssignment_5");
					put(grammarAccess.getWorkSequenceAccess().getLinkTypeAssignment_1(), "rule__WorkSequence__LinkTypeAssignment_1");
					put(grammarAccess.getWorkSequenceAccess().getPredecessorAssignment_3(), "rule__WorkSequence__PredecessorAssignment_3");
					put(grammarAccess.getWorkSequenceAccess().getSuccessorAssignment_5(), "rule__WorkSequence__SuccessorAssignment_5");
					put(grammarAccess.getGuidanceAccess().getTextAssignment_2(), "rule__Guidance__TextAssignment_2");
					put(grammarAccess.getRessourceDefinitionAccess().getNameAssignment_1(), "rule__RessourceDefinition__NameAssignment_1");
					put(grammarAccess.getRessourceDefinitionAccess().getNumberAssignment_3(), "rule__RessourceDefinition__NumberAssignment_3");
					put(grammarAccess.getRessourceInstanceAccess().getTypeAssignment_2(), "rule__RessourceInstance__TypeAssignment_2");
					put(grammarAccess.getRessourceInstanceAccess().getActivityAssignment_4(), "rule__RessourceInstance__ActivityAssignment_4");
					put(grammarAccess.getRessourceInstanceAccess().getInstancesAssignment_6(), "rule__RessourceInstance__InstancesAssignment_6");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			be.ui.contentassist.antlr.internal.InternalSimplePDLParser typedParser = (be.ui.contentassist.antlr.internal.InternalSimplePDLParser) parser;
			typedParser.entryRuleProcess();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SimplePDLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SimplePDLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
