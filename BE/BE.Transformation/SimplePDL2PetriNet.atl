-- @path simplepdl=/BE/SimplePDL.ecore
-- @path petrinet=/BE/PetriNet.ecore

module SimplePDL2PetriNet;
create OUT : petrinet from IN : simplepdl;

-- Obtenir le processus qui contient ce process element.
-- Remarque: Ce helper ne serait pas utile si une r�f�rence opposite
-- avait �t� plac�e entre Process et ProcessElement
helper context simplepdl!ProcessElement
def: getProcess(): simplepdl!Process =
	simplepdl!Process.allInstances()
		->select(p | p.processElements->includes(self))
		->asSequence()->first();

-- Traduire un Process en un PetriNet de m�me nom
rule Process2PetriNet {
	from p: simplepdl!Process
	to pn: petrinet!PetriNet (name <- p.name)
}

-- Traduire une WorkDefinition en un motif sur le r�seau de Petri
rule WorkDefinition2PetriNet {
	from wd: simplepdl!WorkDefinition
	to
		-- PLACES d'une WorkDefinition : ready, started, finished, hasStarted
		p_ready: petrinet!Place(
						name <- wd.name + '_ready',
						marking <- 1,
						net <- wd.getProcess()),
		p_started: petrinet!Place(
						name <- wd.name + '_started',
						marking <- 0,
						net <- wd.getProcess()),
		p_finished: petrinet!Place(
						name <- wd.name + '_finished',
						marking <- 0,
						net <- wd.getProcess()),
		p_hasStarted: petrinet!Place(
						name <- wd.name + '_hasStarted',
						marking <- 0,
						net <- wd.getProcess()),
		
		-- TRANSITIONS d'une WorkDefinition : start, finish
		t_start: petrinet!Transition(
				name <- wd.name + '_start',
				incomings <- a_r2s,
				outgoings <- a_s2s,
				min_time <- wd.min_time,
				max_time <- wd.max_time,
				net <- wd.getProcess()),
		t_finish: petrinet!Transition(
				name <- wd.name + '_finish',
				incomings <- a_s2f,
				outgoings <- a_f2f,
				min_time <- wd.min_time,
				max_time <- wd.max_time,
				net <- wd.getProcess()),
	
		-- ARCS d'une WorkDefinitions : ready2start, start2started, started2finish, finish2finished
		a_r2s: petrinet!Arc(
				source <- p_ready,
				target <- t_start,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
		a_s2s: petrinet!Arc(
				source <- t_start,
				target <- p_started,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
		a_s2f: petrinet!Arc(
				source <- p_started,
				target <- t_finish,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
		a_f2f: petrinet!Arc(
				source <- t_finish,
				target <- p_finished,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess()),
		a_s2h: petrinet!Arc(
				source <- t_start,
				target <- p_hasStarted,
				weight <- 1,
				kind <- #normal,
				net <- wd.getProcess())
}

-- Traduire une WorkSequence en un motif sur le r�seau de Petri
rule WorkSequence2PetriNet {
	from ws: simplepdl!WorkSequence
	to
		
		-- ARCS d'une WorkSequence : hasStarted / finished ---> t_ws  , t_ws ---> start / finish 
		a_ws: petrinet!Arc(
				source <- 
					if ws.linkType = #startToStart or ws.linkType = #startToFinish then
						thisModule.resolveTemp(ws.predecessor, 'p_hasStarted')
					else
						thisModule.resolveTemp(ws.predecessor, 'p_finished')
					endif
					,
				target <- 
					if ws.linkType = #startToStart or ws.linkType = #finishToStart then
						thisModule.resolveTemp(ws.successor, 't_start')
					else
						thisModule.resolveTemp(ws.successor, 't_finish')
					endif
					,
				weight <- 1,
				kind <- #read_arc,
				net <- ws.getProcess())

}

rule RessourceDefinition2PetriNet {
	from rd: simplepdl!RessourceDefinition
	to
		p_ressource: petrinet!Place(
						name <- rd.name,
						marking <- rd.number,
						net <- rd.getProcess())
}

rule RessourceInstance2PetriNet {
	from ri: simplepdl!RessourceInstance
	to
		t_ressource_start: petrinet!Arc(
						source <- thisModule.resolveTemp(ri.type, 'p_ressource'),
						target <- thisModule.resolveTemp(ri.activity, 't_start'),
						weight <- ri.instances,
						kind <- #normal,
						net <- ri.getProcess()),
		t_ressource_finish: petrinet!Arc(
						source <- thisModule.resolveTemp(ri.activity, 't_finish'),
						target <- thisModule.resolveTemp(ri.type, 'p_ressource'),
						weight <- ri.instances,
						kind <- #normal,
						net <- ri.getProcess())
}
